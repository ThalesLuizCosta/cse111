CSE 111 Proposal for a Student Chosen Program

    (This is a proposal. All proposals are written with our best
    knowledge at the beginning of a project. As we progress from the
    beginning to the end of a project, we gain more knowledge, and we
    change some of our proposed ideas. This is part of completing any
    project and is fine.  However, we still must write a proposal so
    that our teachers or supervisors know what we intend to do. Please
    answer each of the following questions to the best of your
    knowledge.)

1. What is the title of your program?
   DateTime Operations

2. What real-world problem will your program address or help to solve?

   Scheduling Applications: The program can be used to develop scheduling applications where you need to handle dates and times, such as setting reminders or       scheduling meetings.
   
   Data Analysis: In data analysis, you often need to work with timestamps. The datetime module can help parse, format, and manipulate these timestamps.

   Time Tracking: If you’re building a time tracking application, you can use the datetime module to record start and end times, and calculate the duration.
   Age Calculator: You can create a program that calculates a person’s age based on their birth date.


3. What will you learn from developing this program?
   Understanding of Python’s datetime module: I’ll gain a deep understanding of how to use the datetime module to manipulate dates and times in Python.
   
   Problem-solving skills: Writing a program to solve a real-world problem helps improve my problem-solving skills. I’ll learn how to break down a problem into       smaller, manageable parts and solve them step by step.

   Programming concepts: I’ll practice and reinforce key programming concepts such as variables, functions, loops, and conditionals.

   Data Types and Structures: I’ll learn about Python’s built-in date and time data types and how to work with them.

   Code organization: If my program grows large, I’ll learn how to organize my code into functions or classes to make it more readable and maintainable.

   Testing and Debugging: I’ll inevitably encounter bugs and errors while writing my program. This will improve my skills in testing and debugging.

4. What Python modules will your program use?
    Datetime

    (Some examples are: csv, datetime, functools, matplotlib, math,
    pandas, pytest, random, requests, and tkinter.)

5. List the names of functions you will need?
    The specific functions I’ll need will depend on the exact requirements of my program. However, here are some commonly used functions from Python’s datetime module:

   datetime.now(): This function returns the current date and time.
   datetime.date(): This function can be used to create a date. You need to provide year, month, and day as arguments.
   datetime.time(): This function can be used to create a time. You can provide hour, minute, second, and microsecond.
   datetime.timedelta(): This function is used for manipulating differences between two date, time, or datetime instances to microsecond resolution.
   datetime.strftime(): This function is used to convert a datetime object to a string with a specified format.
   datetime.strptime(): This function is used to parse a string representing a date and time according to a format.

    (Remember that the most reusable functions don't get user input and
    don't print results but instead have parameters and return a result.
    Functions that get user input and print results are important and do
    useful work but are not easily reusable.)

    (Remember also that it's hard to test functions that get user input
    and print results. It's easy to test functions that don't get user
    input and don't print results but instead have parameters and return
    a result. Therefore, you should write most of your program functions
    to have parameters and return a result.)

6. List the names of the test functions you will write.

   test_current_date_time(): This function could test whether datetime.now() returns the current date and time.
   test_create_date(): This function could test whether datetime.date() correctly creates a date.
   test_create_time(): This function could test whether datetime.time() correctly creates a time.
   test_time_difference(): This function could test whether datetime.timedelta() correctly calculates the difference between two times or dates.
   test_date_to_string(): This function could test whether datetime.strftime() correctly converts a date to a string.
   test_string_to_date(): This function could test whether datetime.strptime() correctly parses a date from a string.